========== 1 ==========
OPERATING_MODE is IDLE
[['OPERATING_MODE', 'is', 'IDLE']]
logic3: OPERATING_MODE == IDLE
========== 2 ==========
OPERATING_MODE is WARM_START or OPERATING_MODE is COLD_START
[['OPERATING_MODE', 'is', 'WARM_START', 'or', 'OPERATING_MODE', 'is', 'COLD_START']]
logic3: OPERATING_MODE == WARM_START
<-- or -->
logic3: OPERATING_MODE == COLD_START
========== 3 ==========
OPERATING_MODE is NORMAL
[['OPERATING_MODE', 'is', 'NORMAL']]
logic3: OPERATING_MODE == NORMAL
========== 4 ==========	# the error should be regarded as error handler process
an error process has been created
[['an error process', 'has been created']]
logic2: this->PROCESS in Set(PROCESS)
========== 5 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 6 ==========
TIME_OUT is zero
[['TIME_OUT', 'is', 'zero']]
logic3: TIME_OUT == 0
========== 7 ==========
TIME_OUT is not infinite
[['TIME_OUT', 'is not', 'infinite']]
logic3: not isInfinite(TIME_OUT)
========== 8 ==========
specified process has already been suspended, either through SUSPEND or SUSPEND_SELF
[['specified process', 'has been suspended', 'T:already']]
logic2: isSuspended(PROCESS(PROCESS_ID))
========== 9 ==========
the specified process was suspended with a time-out
[['the specified process', 'was suspended', 'with a time-out']]
logic3: isSuspendedWith(PROCESS(PROCESS_ID), time-out)
========== 10 ==========
the specified process is not waiting on a process queue or TIMED_WAIT time delay
[['the specified process', 'is not waiting', 'L:on a process queue or TIMED_WAIT time delay']]
logic3: not isWaitingFor(PROCESS(PROCESS_ID), PROCESS_QUEUE)
<-- and -->
logic3: not isWaitingFor(PROCESS(PROCESS_ID), TIMED_WAIT time delay)
========== 11 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 12 ==========
current process is the error handler process and preemption is disabled and previous process is not stopped
[['current process', 'is', 'the error handler process'], 'and', ['preemption', 'is', 'disabled'], 'and', ['previous process', 'is not stopped']]
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
<-- and -->
logic3: isDisabled(preemption)
<-- and -->
logic2: not isStopped(Previous(this->PROCESS))
========== 13 ==========		# relation extraction fault
current process is error handler and PROCESS_ID is process which the error handler preempted
[['the error handler preempted', 'current process', 'is', 'error handler'], 'and', ['PROCESS_ID', 'is', 'process']]
Error SVO5: [[True, 'the', '', 'error handler', -1], [True, ('preempted', 'VBN')], [True, -1, 'current', 'process', -1], [-1, -1, -1, 'is', -1], [True, -1, '', 'error handler', -1]]
<-- and -->
logic3: PROCESS_ID == PROCESS(PROCESS_ID)
========== 14 ==========
specified process is waiting in a process queue
[['specified process', 'is waiting', 'L:in a process queue']]
logic3: isWaitingFor(PROCESS(PROCESS_ID), PROCESS_QUEUE)
========== 15 ==========
the process is an aperiodic process
[['the process', 'is', 'an aperiodic process']]
logic3: isAperiodic(PROCESS(PROCESS_ID))
========== 16 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 17 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 18 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 19 ==========
the specified process is an aperiodic process
[['the specified process', 'is', 'an aperiodic process']]
logic3: isAperiodic(PROCESS(PROCESS_ID))
========== 20 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 21 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 22 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 23 ==========
the partition's lock level is zero
[["the partition's lock level", 'is', 'zero']]
logic3: this->PARTITION.LOCK_LEVEL == 0
========== 24 ==========
sampling port is empty
[['sampling port', 'is', 'empty']]
logic3: isEmpty(SAMPLING_PORT(SAMPLING_PORT_ID))
========== 25 ==========
age of the copied message is consistent with the required REFRESH_PERIOD attribute of the port
[['age of the copied message', 'is', 'consistent with the required REFRESH_PERIOD attribute of the port']]
logic3: isConsistentWith(age(MESSAGE(MESSAGE_ADDR, LENGTH)), SAMPLING_PORT(SAMPLING_PORT_ID).REFRESH_PERIOD)
========== 26 ==========		# relation extraction fault
there is sufficient space in the port's message queue to accept the message represented by MESSAGE_ADDR and LENGTH
[['the message', 'represented', 'by MESSAGE_ADDR and LENGTH']]
logic3: MESSAGE(MESSAGE_ADDR, LENGTH)
========== 27 ==========
no other process is waiting to send a message to that port
[['no other process', 'is waiting', 'to send a message to that port']]
logic3: all process in Set(PROCESS) and this->PROCESS != process | not isWaitingToSendMessageTo(process, QUEUING_PORT(QUEUING_PORT_ID))
========== 28 ==========
preemption is disabled or the current process is the error handler process
[['preemption is disabled', 'or', 'the current process', 'is', 'the error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 29 ==========
TIME_OUT is not infinite
[['TIME_OUT', 'is not', 'infinite']]
logic3: not isInfinite(TIME_OUT)
========== 30 ==========
TIME_OUT is not infinite
[['TIME_OUT', 'is not', 'infinite']]
logic3: not isInfinite(TIME_OUT)
========== 31 ==========
the FIFO message queue of the specified port is not empty
[['the FIFO message queue of the specified port', 'is not', 'empty']]
logic3: not isEmpty(QUEUING_PORT(QUEUING_PORT_ID).MESSAGE_QUEUE)
========== 32 ==========		# relation formalization fault
an overflow of the received message queue has occurred
[['an overflow of the received message queue', 'has occurred']]
logic2: future work
========== 33 ==========
preemption is disabled or the current process is error handler process
[['preemption is disabled', 'or', 'the current process', 'is', 'error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 34 ==========
TIME_OUT is not infinite
[['TIME_OUT', 'is not', 'infinite']]
logic3: not isInfinite(TIME_OUT)
========== 35 ==========
TIME_OUT is not infinite
[['TIME_OUT', 'is not', 'infinite']]
logic3: not isInfinite(TIME_OUT)
========== 36 ==========
no processes are waiting on an empty buffer
[['no processes', 'are waiting', 'L:on an empty buffer']]
logic3: all process in Set(PROCESS) | not isWaitingFor(process, BUFFER(BUFFER_ID)) and isEmpty(BUFFER(BUFFER_ID))
========== 37 ==========		# relation formalization fault, 'this receiving process' refer to 'the first receiving process waiting_to_read buffer'
this receiving process is waiting on an empty buffer with a time-out
[['this receiving process', 'is waiting', 'L:on an empty buffer with a time-out']]
logic3: exist process in Set(PROCESS) | isWaitingToReveiveMessageFrom(process, BUFFER(BUFFER_ID)) and isEmpty(BUFFER(BUFFER_ID))
========== 38 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 39 ==========
preemption is disabled or the current process is the error handler process
[['preemption is disabled', 'or', 'the current process', 'is', 'the error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 40 ==========
TIME_OUT is infinite
[['TIME_OUT', 'is', 'infinite']]
logic3: isInfinite(TIME_OUT)
========== 41 ==========
message buffer is not empty
[['message buffer', 'is not', 'empty']]
logic3: not isEmpty(BUFFER(BUFFER_ID))
========== 42 ==========
there are sending processes waiting on this buffer
[['processes', 'waiting', 'L:on this buffer']]
logic3: exist process in Set(PROCESS) | isWaitingFor(process, BUFFER(BUFFER_ID))
========== 43 ==========		# relation formalization fault, 'this sending process' refer to 'the first receiving process waiting_to_write buffer'
this sending process was waiting on the buffer with a time-out
[['this sending process', 'was waiting', 'L:on the buffer with a time-out']]
logic3: exist process in Set(PROCESS) | isWaitingToSendMessageTo(process, BUFFER(BUFFER_ID))
========== 44 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 45 ==========
preemption is disabled or the current process is the error handler process
[['preemption is disabled', 'or', 'the current process', 'is', 'the error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 46 ==========
TIME_OUT is infinite
[['TIME_OUT', 'is', 'infinite']]
logic3: isInfinite(TIME_OUT)
========== 47 ==========
there are processes waiting on an empty blackboard
[['processes', 'waiting', 'L:on an empty blackboard']]
logic3: exist process in Set(PROCESS) | isWaitingFor(process, BLACKBOARD(BLACKBOARD_ID)) and isEmpty(BLACKBOARD(BLACKBOARD_ID))
========== 48 ==========		# pronoun
some of them are waiting with a time-out
[['some of them', 'are waiting', 'with a time-out']]
logic3: isWaitingFor(some of -PRON-, PROCESS_QUEUE, time-out)
========== 49 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 50 ==========
empty indicator of the specified blackboard is OCCUPIED
[['empty indicator of the specified blackboard', 'is', 'OCCUPIED']]
logic3: BLACKBOARD(BLACKBOARD_ID).EMPTY_INDICATOR == OCCUPIED
========== 51 ==========
preemption is disabled or the current process is the error handler process
[['preemption is disabled', 'or', 'the current process', 'is', 'the error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 52 ==========
TIME_OUT is infinite
[['TIME_OUT', 'is', 'infinite']]
logic3: isInfinite(TIME_OUT)
========== 53 ==========
current value of the specified semaphore is greater than 0
[['current value of the specified semaphore', 'is', 'greater than 0']]
logic3: SEMAPHORE(SEMAPHORE_ID).CURRENT_VALUE > 0
========== 54 ==========
preemption is disabled or the current process is the error handler process
[['preemption is disabled', 'or', 'the current process', 'is', 'the error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 55 ==========
TIME_OUT is infinite
[['TIME_OUT', 'is', 'infinite']]
logic3: isInfinite(TIME_OUT)
========== 56 ==========
no processes are waiting on the specified semaphore
[['no processes', 'are waiting', 'L:on the specified semaphore']]
logic3: all process in Set(PROCESS) | not isWaitingFor(process, SEMAPHORE(SEMAPHORE_ID))
========== 57 ==========		# relation extraction fault
this process is waiting on the semaphore with a time-out
[['this process', 'is waiting', 'L:on the semaphore']]
logic3: isWaitingFor(this->PROCESS, SEMAPHORE(SEMAPHORE_ID))
========== 58 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 59 ==========
there are any processes waiting for that event
[['any processes', 'waiting', 'for that event']]
logic3: exist process in Set(PROCESS) | isWaitingFor(process, EVENT(EVENT_ID))
========== 60 ==========		# pronoun
some of them are waiting with a time-out
[['some of them', 'are waiting', 'with a time-out']]
logic3: isWaitingFor(some of -PRON-, PROCESS_QUEUE, time-out)
========== 61 ==========
preemption is enabled
[['preemption', 'is enabled']]
logic2: isEnabled(preemption)
========== 62 ==========
the state of the specified event is UP
[['the state of the specified event', 'is', 'UP']]
logic3: EVENT(EVENT_ID).STATE == UP
========== 63 ==========
preemption is disabled or the current process is the error handler process
[['preemption is disabled', 'or', 'the current process', 'is', 'the error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 64 ==========
TIME_OUT is infinite
[['TIME_OUT', 'is', 'infinite']]
logic3: isInfinite(TIME_OUT)
========== 65 ==========
this service is called by the error handler process
[['this service', 'is called', 'by the error handler process']]
logic3: isCalledBy(SERVICE(RAISE_APPLICATION_ERROR), ERROR_HANDLER_PROCESS)
========== 66 ==========
the error handler process is not created
[['the error handler process', 'is not created']]
logic2: ERROR_HANDLER_PROCESS not in Set(PROCESS)


========== 1 ==========
OPERATING_MODE does not represent an existing mode
[['OPERATING_MODE', 'does not represent', 'an existing mode']]
logic3: OPERATING_MODE not in Set(PARTITION_OPERATING_MODE)
========== 2 ==========
OPERATING_MODE is NORMAL and current mode is NORMAL
[['current mode', 'is', 'NORMAL'], 'and', ['OPERATING_MODE', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
<-- and -->
logic3: OPERATING_MODE == NORMAL
========== 3 ==========
OPERATING_MODE is WARM_START and current mode is COLD_START
[['OPERATING_MODE', 'is', 'WARM_START'], 'and', ['current mode', 'is', 'COLD_START']]
logic3: OPERATING_MODE == WARM_START
<-- and -->
logic3: this->PARTITION.OPERATING_MODE == COLD_START
========== 4 ==========
there is no current partition process named PROCESS_NAME
[['no current partition process', 'named', 'PROCESS_NAME']]
logic3: PROCESS(PROCESS_NAME) not in Set(this->PARTITION.PROCESS)
========== 5 ==========
PROCESS_ID does not identify an existing process
[['PROCESS_ID', 'does not identify', 'an existing process']]
logic3: PROCESS(PROCESS_ID) not in Set(PROCESS)
========== 6 ==========
insufficient storage capacity for the creation of the specified process or maximum number of processes have been created
[['insufficient storage capacity for the creation of the specified process', 'or', 'maximum number of processes', 'have been created']]
logic1: (True, 'isInsufficient_StorageCapacity_for(Creation(PROCESS(PROCESS_ID)))')
<-- or -->
logic2: isMaximum(len(Set(PROCESS)))
========== 7 ==========
the process named ATTRIBUTES.NAME is already created
[['the process named ATTRIBUTES.NAME', 'is created', 'T:already']]
logic2: PROCESS(ATTRIBUTES.NAME) in Set(PROCESS)
========== 8 ==========
ATTRIBUTES.PERIOD is finite and ATTRIBUTES.PERIOD is not an integer multiple of partition period defined in the configuration tables
[['ATTRIBUTES.PERIOD', 'is', 'finite'], 'and', ['ATTRIBUTES.PERIOD', 'is not', 'an integer multiple of partition period', 'defined', 'L:in the configuration tables']]
logic3: isFinite(ATTRIBUTES.PERIOD)
<-- and -->
logic5-1: multiple(ConfigurationTables(%partition period), integer)
logic5-2: exist partition_period in Set(ConfigurationTables(partition_period)) | ATTRIBUTES.PERIOD != multiple(partition_period, integer)
========== 9 ==========
ATTRIBUTES.PERIOD is finite and ATTRIBUTES.TIME_CAPACITY is greater than ATTRIBUTES.PERIOD
[['ATTRIBUTES.PERIOD', 'is', 'finite'], 'and', ['ATTRIBUTES.TIME_CAPACITY', 'is', 'greater than ATTRIBUTES.PERIOD']]
logic3: isFinite(ATTRIBUTES.PERIOD)
<-- and -->
logic3: ATTRIBUTES.TIME_CAPACITY > ATTRIBUTES.PERIOD
========== 10 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 11 ==========
PROCESS_ID does not identify an existing process
[['PROCESS_ID', 'does not identify', 'an existing process']]
logic3: PROCESS(PROCESS_ID) not in Set(PROCESS)
========== 12 ==========
PRIORITY is out of range
[['PRIORITY', 'is', 'out of range']]
logic3: isOutOf(PRIORITY, range)
========== 13 ==========
specified process is in the DORMANT state
[['specified process', 'is', 'in the DORMANT state']]
logic3: PROCESS(PROCESS_ID).STATE == DORMANT
========== 14 ==========
preemption is disabled or process is error handler process
[['preemption is disabled', 'or', 'process', 'is', 'error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 15 ==========
TIME_OUT is out of range
[['TIME_OUT', 'is', 'out of range']]
logic3: isOutOf(TIME_OUT, range)
========== 16 ==========
process is periodic
[['process', 'is', 'periodic']]
logic3: isPeriodic(this->PROCESS)
========== 17 ==========
preemption is disabled and the PROCESS_ID is the process which the error handler has preempted
[['preemption', 'is', 'disabled'], 'and', ['the PROCESS_ID', 'is', 'the process which the error handler has preempted']]
logic3: isDisabled(preemption)
<-- and -->
isPreemptedBy(PROCESS(PROCESS_ID), ERROR_HANDLER_PROCESS)
logic3: isPreemptedBy(PROCESS(PROCESS_ID), ERROR_HANDLER_PROCESS)
========== 18 ==========
PROCESS_ID does not identify an existing process or identifies the current process
[['PROCESS_ID', 'does not identify', 'an existing process'], 'or', ['PROCESS_ID', 'identifies', 'the current process']]
logic3: PROCESS(PROCESS_ID) not in Set(PROCESS)
<-- or -->
logic3: PROCESS(PROCESS_ID) == this->PROCESS
========== 19 ==========
the state of the specified process is DORMANT
[['the state of the specified process', 'is', 'DORMANT']]
logic3: PROCESS(PROCESS_ID).STATE == DORMANT
========== 20 ==========
specified process is periodic
[['specified process', 'is', 'periodic']]
logic3: isPeriodic(PROCESS(PROCESS_ID))
========== 21 ==========
PROCESS_ID does not identify an existing process or identifies the current process
[['PROCESS_ID', 'does not identify', 'an existing process'], 'or', ['PROCESS_ID', 'identifies', 'the current process']]
logic3: PROCESS(PROCESS_ID) not in Set(PROCESS)
<-- or -->
logic3: PROCESS(PROCESS_ID) == this->PROCESS
========== 22 ==========
the state of the specified process is DORMANT
[['the state of the specified process', 'is', 'DORMANT']]
logic3: PROCESS(PROCESS_ID).STATE == DORMANT
========== 23 ==========
PROCESS_ID identifies a periodic process
[['PROCESS_ID', 'identifies', 'a periodic process']]
logic3: isPeriodic(PROCESS(PROCESS_ID))
========== 24 ==========
identified process is not a suspended process
[['identified process', 'is not', 'a suspended process']]
logic3: not isSuspended(PROCESS(PROCESS_ID))
========== 25 ==========
PROCESS_ID does not identify an existing process or identifies the current process
[['PROCESS_ID', 'does not identify', 'an existing process'], 'or', ['PROCESS_ID', 'identifies', 'the current process']]
logic3: PROCESS(PROCESS_ID) not in Set(PROCESS)
<-- or -->
logic3: PROCESS(PROCESS_ID) == this->PROCESS
========== 26 ==========
the state of the specified process is DORMANT
[['the state of the specified process', 'is', 'DORMANT']]
logic3: PROCESS(PROCESS_ID).STATE == DORMANT
========== 27 ==========
PROCESS_ID does not identify an existing process
[['PROCESS_ID', 'does not identify', 'an existing process']]
logic3: PROCESS(PROCESS_ID) not in Set(PROCESS)
========== 28 ==========
the state of the specified process is not DORMANT
[['the state of the specified process', 'is not', 'DORMANT']]
logic3: PROCESS(PROCESS_ID).STATE != DORMANT
========== 29 ==========
DEADLINE_TIME calculation is out of range
[['DEADLINE_TIME calculation', 'is', 'out of range']]
logic3: isOutOf(PROCESS(PROCESS_ID).DEADLINE_TIME, range)
========== 30 ==========
PROCESS_ID does not identify an existing process
[['PROCESS_ID', 'does not identify', 'an existing process']]
logic3: PROCESS(PROCESS_ID) not in Set(PROCESS)
========== 31 ==========
the state of the specified process is not DORMANT
[['the state of the specified process', 'is not', 'DORMANT']]
logic3: PROCESS(PROCESS_ID).STATE != DORMANT
========== 32 ==========
DELAY_TIME is out of range
[['DELAY_TIME', 'is', 'out of range']]
logic3: isOutOf(DELAY_TIME, range)
========== 33 ==========
DELAY_TIME is infinite
[['DELAY_TIME', 'is', 'infinite']]
logic3: isInfinite(DELAY_TIME)
========== 34 ==========
the process is periodic and DELAY_TIME is greater or equal to the period of the specified process
[['the process', 'is', 'periodic'], 'and', ['DELAY_TIME', 'is', 'greater or equal to the period of the specified process']]
logic3: isPeriodic(PROCESS(PROCESS_ID))
<-- and -->
logic3: DELAY_TIME >= PROCESS(PROCESS_ID).PERIOD
========== 35 ==========
DEADLINE_TIME calculation is out of range
[['DEADLINE_TIME calculation', 'is', 'out of range']]
logic3: isOutOf(PROCESS(PROCESS_ID).DEADLINE_TIME, range)
========== 36 ==========
current process is error handler process or OPERATING_MODE is not NORMAL
[['current process', 'is', 'error handler process'], 'or', ['OPERATING_MODE', 'is not', 'NORMAL']]
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
<-- or -->
logic3: OPERATING_MODE != NORMAL
========== 37 ==========
partition's lock level is greater or equal to MAX_LOCK_LEVEL
[["partition's lock level", 'is', 'greater or equal to MAX_LOCK_LEVEL']]
logic3: this->PARTITION.LOCK_LEVEL >= MAX_LOCK_LEVEL
========== 38 ==========
the current process is the error handler process or OPERATING_MODE is not NORMAL or the partition's lock level indicates unlocked
[['the current process', 'is', 'the error handler process'], 'or', ['OPERATING_MODE is not', 'NORMAL', 'or', "the partition's lock level", 'indicates', 'unlocked']]
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
<-- or -->
logic3: OPERATING_MODE != NORMAL
<-- or -->
logic3: this->PARTITION.LOCK_LEVEL == 0
========== 39 ==========
preemption is disabled or process is error handler process
[['preemption is disabled', 'or', 'process', 'is', 'error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 40 ==========
DELAY_TIME is out of range
[['DELAY_TIME', 'is', 'out of range']]
logic3: isOutOf(DELAY_TIME, range)
========== 41 ==========
DELAY_TIME is infinite
[['DELAY_TIME', 'is', 'infinite']]
logic3: isInfinite(DELAY_TIME)
========== 42 ==========
preemption is disabled or process is error handler process
[['preemption is disabled', 'or', 'process', 'is', 'error handler process']]
logic3: preemption == disabled
<-- or -->
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
========== 43 ==========
current process is not periodic
[['current process', 'is not', 'periodic']]
logic3: not isPeriodic(this->PROCESS)
========== 44 ==========
DEADLINE_TIME calculation is out of range
[['DEADLINE_TIME calculation', 'is', 'out of range']]
logic3: isOutOf(this->PROCESS.DEADLINE_TIME, range)
========== 45 ==========
process is error handler process or OPERATING_MODE is not NORMAL
[['process', 'is', 'error handler process'], 'or', ['OPERATING_MODE', 'is not', 'NORMAL']]
logic3: this->PROCESS == ERROR_HANDLER_PROCESS
<-- or -->
logic3: OPERATING_MODE != NORMAL
========== 46 ==========
current process is periodic and new deadline will exceed next release point
[['current process', 'is', 'periodic'], 'and', ['new deadline', 'will exceed', 'next release point']]
logic3: isPeriodic(this->PROCESS)
<-- and -->
logic3: New(this->PROCESS.DEADLINE) > Next(release point)
========== 47 ==========
BUDGET_TIME is out of range
[['BUDGET_TIME', 'is', 'out of range']]
logic3: isOutOf(BUDGET_TIME, range)
========== 48 ==========
implementation-defined limit to sampling port creation is exceeded
[['implementation-defined limit to sampling port creation', 'is exceeded']]
logic2: future work
========== 49 ==========		# relation formalization fault,
no sampling port of the partition is named SAMPLING_PORT_NAME in the configuration tables
[['no sampling port of the partition', 'is named', 'SAMPLING_PORT_NAME', 'L:in the configuration tables']]
logic4: SAMPLING_PORT(SAMPLING_PORT_NAME) not in Set(this->PARTITION.SAMPLING_PORT)
========== 50 ==========
a port named SAMPLING_PORT_NAME is already created
[['a port named SAMPLING_PORT_NAME', 'is created', 'T:already']]
logic2: SAMPLING_PORT(SAMPLING_PORT_NAME) in Set(SAMPLING_PORT)
========== 51 ==========
MAX_MESSAGE_SIZE is zero, negative, or is not equal to the value specified in the configuration tables
[['MAX_MESSAGE_SIZE', 'is', 'zero, negative, or is not equal to the value', 'specified', 'L:in the configuration tables']]
logic3: MAX_MESSAGE_SIZE == 0
<-- or -->
logic3: MAX_MESSAGE_SIZE < 0
<-- or -->
logic5-1: ConfigurationTables(%value)
logic5-2: MAX_MESSAGE_SIZE != SAMPLING_PORT(ConfigurationTables(SAMPLING_PORT_NAME)).MAX_MESSAGE_SIZE
========== 52 ==========
PORT_DIRECTION is invalid or is not equal to the value specified in the configuration tables
[['PORT_DIRECTION', 'is', 'invalid'], 'or', ['PORT_DIRECTION', 'is not', 'equal to the value', 'specified', 'L:in the configuration tables']]
logic3: isInvalid(PORT_DIRECTION)
<-- or -->
logic5-1: ConfigurationTables(%value)
logic5-2: PORT_DIRECTION != SAMPLING_PORT(ConfigurationTables(SAMPLING_PORT_NAME)).PORT_DIRECTION
========== 53 ==========
REFRESH_PERIOD is out of range
[['REFRESH_PERIOD', 'is', 'out of range']]
logic3: isOutOf(REFRESH_PERIOD, range)
========== 54 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 55 ==========
SAMPLING_PORT_ID does not identify an existing sampling port
[['SAMPLING_PORT_ID', 'does not identify', 'an existing sampling port']]
logic3: SAMPLING_PORT(SAMPLING_PORT_ID) not in Set(SAMPLING_PORT)
========== 56 ==========
LENGTH is greater than MAX_MESSAGE_SIZE for the specified port
[['LENGTH', 'is', 'greater than MAX_MESSAGE_SIZE for the specified port']]
logic3: LENGTH > SAMPLING_PORT(SAMPLING_PORT_ID).MAX_MESSAGE_SIZE
========== 57 ==========
LENGTH is zero or negative
[['LENGTH', 'is', 'zero or negative']]
logic3: LENGTH == 0
<-- or -->
logic3: LENGTH < 0
========== 58 ==========		# relation extraction fault
the specified port is not configured to operate as a source
[['the specified port', 'is not configured', 'to operate']]
The SVO is not complement
logic2: 
========== 59 ==========
SAMPLING_PORT_ID does not identify an existing sampling port
[['SAMPLING_PORT_ID', 'does not identify', 'an existing sampling port']]
logic3: SAMPLING_PORT(SAMPLING_PORT_ID) not in Set(SAMPLING_PORT)
========== 60 ==========		# relation extraction fault
the specified port is not configured to operate as a destination
[['the specified port', 'is not configured', 'to operate']]
The SVO is not complement
logic2: 
========== 61 ==========
there is no current partition sampling port named SAMPLING_PORT_NAME
[['no current partition sampling port', 'named', 'SAMPLING_PORT_NAME']]
logic3: SAMPLING_PORT(SAMPLING_PORT_NAME) not in Set(this->PARTITION.SAMPLING_PORT)
========== 62 ==========
SAMPLING_PORT_ID does not identify an existing sampling port
[['SAMPLING_PORT_ID', 'does not identify', 'an existing sampling port']]
logic3: SAMPLING_PORT(SAMPLING_PORT_ID) not in Set(SAMPLING_PORT)
========== 63 ==========
implementation-defined limit to queuing port creation is exceeded
[['implementation-defined limit to queuing port creation', 'is exceeded']]
logic2: future work
========== 64 ==========		# relation formalization fault
no queuing port of the partition is named QUEUING_PORT_NAME in the configuration tables
[['no queuing port of the partition', 'is named', 'QUEUING_PORT_NAME', 'L:in the configuration tables']]
logic4: QUEUING_PORT(QUEUING_PORT_NAME) not in Set(this->PARTITION.QUEUING_PORT)
========== 65 ==========
port named QUEUING_PORT_NAME is already created
[['port named QUEUING_PORT_NAME', 'is created', 'T:already']]
logic2: QUEUING_PORT(QUEUING_PORT_NAME) in Set(QUEUING_PORT)
========== 66 ==========
MAX_MESSAGE_SIZE is zero, negative, or is not equal to the value specified in the configuration tables
[['MAX_MESSAGE_SIZE', 'is', 'zero, negative, or is not equal to the value', 'specified', 'L:in the configuration tables']]
logic3: MAX_MESSAGE_SIZE == 0
<-- or -->
logic3: MAX_MESSAGE_SIZE < 0
<-- or -->
logic5-1: ConfigurationTables(%value)
logic5-2: MAX_MESSAGE_SIZE != QUEUING_PORT(ConfigurationTables(QUEUING_PORT_NAME)).MAX_MESSAGE_SIZE
========== 67 ==========
MAX_NB_MESSAGE is out of range or is not equal to the value specified in the configuration tables
[['MAX_NB_MESSAGE', 'is', 'out of range'], 'or', ['MAX_NB_MESSAGE', 'is not', 'equal to the value', 'specified', 'L:in the configuration tables']]
logic3: isOutOf(MAX_NB_MESSAGE, range)
<-- or -->
logic5-1: ConfigurationTables(%value)
logic5-2: MAX_NB_MESSAGE != QUEUING_PORT(ConfigurationTables(QUEUING_PORT_NAME)).MAX_NB_MESSAGE
========== 68 ==========
PORT_DIRECTION is invalid or is not equal to the value specified in the configuration tables
[['PORT_DIRECTION', 'is', 'invalid'], 'or', ['PORT_DIRECTION', 'is not', 'equal to the value', 'specified', 'L:in the configuration tables']]
logic3: isInvalid(PORT_DIRECTION)
<-- or -->
logic5-1: ConfigurationTables(%value)
logic5-2: PORT_DIRECTION != QUEUING_PORT(ConfigurationTables(QUEUING_PORT_NAME)).PORT_DIRECTION
========== 69 ==========
QUEUING_DISCIPLINE is invalid
[['QUEUING_DISCIPLINE', 'is', 'invalid']]
logic3: isInvalid(QUEUING_DISCIPLINE)
========== 70 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 71 ==========
QUEUING_PORT_ID does not identify an existing queuing port
[['QUEUING_PORT_ID', 'does not identify', 'an existing queuing port']]
logic3: QUEUING_PORT(QUEUING_PORT_ID) not in Set(QUEUING_PORT)
========== 72 ==========
TIME_OUT is out of range
[['TIME_OUT', 'is', 'out of range']]
logic3: isOutOf(TIME_OUT, range)
========== 73 ==========
LENGTH is greater than MAX_MESSAGE_SIZE for the specified port
[['LENGTH', 'is', 'greater than MAX_MESSAGE_SIZE for the specified port']]
logic3: LENGTH > QUEUING_PORT(QUEUING_PORT_ID).MAX_MESSAGE_SIZE
========== 74 ==========
LENGTH is zero or negative
[['LENGTH', 'is', 'zero or negative']]
logic3: LENGTH == 0
<-- or -->
logic3: LENGTH < 0
========== 75 ==========		# relation extraction fault
the specified port is not configured to operate as a source port
[['the specified port', 'is not configured', 'to operate']]
The SVO is not complement
logic2: 
========== 76 ==========
QUEUING_PORT_ID does not identify an existing queuing port
[['QUEUING_PORT_ID', 'does not identify', 'an existing queuing port']]
logic3: QUEUING_PORT(QUEUING_PORT_ID) not in Set(QUEUING_PORT)
========== 77 ==========
TIME_OUT is out of range
[['TIME_OUT', 'is', 'out of range']]
logic3: isOutOf(TIME_OUT, range)
========== 78 ==========		# relation extraction fault
the specified port is not configured to operate as a destination port
[['the specified port', 'is not configured', 'to operate']]
The SVO is not complement
logic2: 
========== 79 ==========
there is no current partition queuing port named QUEUING_PORT_NAME
[['no current partition queuing port', 'named', 'QUEUING_PORT_NAME']]
logic3: QUEUING_PORT(QUEUING_PORT_NAME) not in Set(this->PARTITION.QUEUING_PORT)
========== 80 ==========
QUEUING_PORT_ID does not identify an existing queuing port
[['QUEUING_PORT_ID', 'does not identify', 'an existing queuing port']]
logic3: QUEUING_PORT(QUEUING_PORT_ID) not in Set(QUEUING_PORT)
========== 81 ==========
QUEUING_PORT_ID does not identify an existing queuing port
[['QUEUING_PORT_ID', 'does not identify', 'an existing queuing port']]
logic3: QUEUING_PORT(QUEUING_PORT_ID) not in Set(QUEUING_PORT)
========== 82 ==========		# relation extraction fault
the specified port is not configured to operate as a destination port
[['the specified port', 'is not configured', 'to operate']]
The SVO is not complement
logic2: 
========== 83 ==========
the buffer named BUFFER_NAME has already been created
[['the buffer named BUFFER_NAME', 'has been created', 'T:already']]
logic2: BUFFER(BUFFER_NAME) in Set(BUFFER)
========== 84 ==========
MAX_MESSAGE_SIZE is zero or negative
[['MAX_MESSAGE_SIZE', 'is', 'zero or negative']]
logic3: MAX_MESSAGE_SIZE == 0
<-- or -->
logic3: MAX_MESSAGE_SIZE < 0
========== 85 ==========
MAX_NB_MESSAGE is out of range
[['MAX_NB_MESSAGE', 'is', 'out of range']]
logic3: isOutOf(MAX_NB_MESSAGE, range)
========== 86 ==========
QUEUING_DISCIPLINE is invalid
[['QUEUING_DISCIPLINE', 'is', 'invalid']]
logic3: isInvalid(QUEUING_DISCIPLINE)
========== 87 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 88 ==========
BUFFER_ID does not identify an existing buffer
[['BUFFER_ID', 'does not identify', 'an existing buffer']]
logic3: BUFFER(BUFFER_ID) not in Set(BUFFER)
========== 89 ==========
LENGTH is greater than the MAX_MESSAGE_SIZE specified for the buffer
[['LENGTH', 'is', 'greater than the MAX_MESSAGE_SIZE', 'specified', 'for the buffer']]
logic5-1: BUFFER(BUFFER_ID).MAX_MESSAGE_SIZE
logic5-2: LENGTH > BUFFER(BUFFER_ID).MAX_MESSAGE_SIZE
========== 90 ==========
LENGTH is zero or negative
[['LENGTH', 'is', 'zero or negative']]
logic3: LENGTH == 0
<-- or -->
logic3: LENGTH < 0
========== 91 ==========
TIME_OUT is out of range
[['TIME_OUT', 'is', 'out of range']]
logic3: isOutOf(TIME_OUT, range)
========== 92 ==========
BUFFER_ID does not identify an existing buffer
[['BUFFER_ID', 'does not identify', 'an existing buffer']]
logic3: BUFFER(BUFFER_ID) not in Set(BUFFER)
========== 93 ==========
TIME_OUT is out of range
[['TIME_OUT', 'is', 'out of range']]
logic3: isOutOf(TIME_OUT, range)
========== 94 ==========
the current partition has no buffer named BUFFER_NAME
[['the current partition', 'has', 'no buffer', 'named', 'BUFFER_NAME']]
logic5-1: ('BUFFER', 'BUFFER(BUFFER_NAME) not in Set(BUFFER)')
logic5-2: BUFFER(BUFFER_NAME) not in Set(BUFFER)
========== 95 ==========
BUFFER_ID does not identify an existing buffer
[['BUFFER_ID', 'does not identify', 'an existing buffer']]
logic3: BUFFER(BUFFER_ID) not in Set(BUFFER)
========== 96 ==========
the blackboard named BLACKBOARD_NAME has already been created
[['the blackboard named BLACKBOARD_NAME', 'has been created', 'T:already']]
logic2: BLACKBOARD(BLACKBOARD_NAME) in Set(BLACKBOARD)
========== 97 ==========
MAX_MESSAGE_SIZE is zero or negative
[['MAX_MESSAGE_SIZE', 'is', 'zero or negative']]
logic3: MAX_MESSAGE_SIZE == 0
<-- or -->
logic3: MAX_MESSAGE_SIZE < 0
========== 98 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 99 ==========
BLACKBOARD_ID does not identify an existing blackboard
[['BLACKBOARD_ID', 'does not identify', 'an existing blackboard']]
logic3: BLACKBOARD(BLACKBOARD_ID) not in Set(BLACKBOARD)
========== 100 ==========
LENGTH is greater than MAX_MESSAGE_SIZE specified for the blackboard
[['LENGTH', 'is', 'greater than MAX_MESSAGE_SIZE', 'specified', 'for the blackboard']]
logic5-1: BLACKBOARD(BLACKBOARD_ID).MAX_MESSAGE_SIZE
logic5-2: LENGTH > BLACKBOARD(BLACKBOARD_ID).MAX_MESSAGE_SIZE
========== 101 ==========
LENGTH is zero or negative
[['LENGTH', 'is', 'zero or negative']]
logic3: LENGTH == 0
<-- or -->
logic3: LENGTH < 0
========== 102 ==========
BLACKBOARD_ID does not identify an existing blackboard
[['BLACKBOARD_ID', 'does not identify', 'an existing blackboard']]
logic3: BLACKBOARD(BLACKBOARD_ID) not in Set(BLACKBOARD)
========== 103 ==========
TIME_OUT is out of range
[['TIME_OUT', 'is', 'out of range']]
logic3: isOutOf(TIME_OUT, range)
========== 104 ==========
BLACKBOARD_ID does not identify an existing blackboard
[['BLACKBOARD_ID', 'does not identify', 'an existing blackboard']]
logic3: BLACKBOARD(BLACKBOARD_ID) not in Set(BLACKBOARD)
========== 105 ==========
the current partition has no blackboard named BLACKBOARD_NAME
[['the current partition', 'has', 'no blackboard', 'named', 'BLACKBOARD_NAME']]
logic5-1: ('BLACKBOARD', 'BLACKBOARD(BLACKBOARD_NAME) not in Set(BLACKBOARD)')
logic5-2: BLACKBOARD(BLACKBOARD_NAME) not in Set(BLACKBOARD)
========== 106 ==========
BLACKBOARD_ID does not identify an existing blackboard
[['BLACKBOARD_ID', 'does not identify', 'an existing blackboard']]
logic3: BLACKBOARD(BLACKBOARD_ID) not in Set(BLACKBOARD)
========== 107 ==========
the maximum number of semaphores has been created
[['the maximum number of semaphores', 'has been created']]
logic2: isMaximum(len(Set(SEMAPHORE)))
========== 108 ==========
a semaphore named SEMAPHORE_NAME has already been created
[['a semaphore named SEMAPHORE_NAME', 'has been created', 'T:already']]
logic2: SEMAPHORE(SEMAPHORE_NAME) in Set(SEMAPHORE)
========== 109 ==========
CURRENT_VALUE is out of range
[['CURRENT_VALUE', 'is', 'out of range']]
logic3: isOutOf(CURRENT_VALUE, range)
========== 110 ==========
MAXIMUM_VALUE is out of range
[['MAXIMUM_VALUE', 'is', 'out of range']]
logic3: isOutOf(MAXIMUM_VALUE, range)
========== 111 ==========
CURRENT_VALUE is greater than MAXIMUM_VALUE
[['CURRENT_VALUE', 'is', 'greater than MAXIMUM_VALUE']]
logic3: CURRENT_VALUE > MAXIMUM_VALUE
========== 112 ==========
QUEUING_DISCIPLINE is invalid
[['QUEUING_DISCIPLINE', 'is', 'invalid']]
logic3: isInvalid(QUEUING_DISCIPLINE)
========== 113 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 114 ==========
SEMAPHORE_ID does not identify an existing semaphore
[['SEMAPHORE_ID', 'does not identify', 'an existing semaphore']]
logic3: SEMAPHORE(SEMAPHORE_ID) not in Set(SEMAPHORE)
========== 115 ==========
TIME_OUT is out of range
[['TIME_OUT', 'is', 'out of range']]
logic3: isOutOf(TIME_OUT, range)
========== 116 ==========
SEMAPHORE_ID does not identify an existing semaphore
[['SEMAPHORE_ID', 'does not identify', 'an existing semaphore']]
logic3: SEMAPHORE(SEMAPHORE_ID) not in Set(SEMAPHORE)
========== 117 ==========
the semaphore's current value equals its maximum value
[["the semaphore's current value", 'equals', 'its maximum value']]
logic3: SEMAPHORE(SEMAPHORE_ID).CURRENT_VALUE == SEMAPHORE(SEMAPHORE_ID).MAXIMUM_VALUE
========== 118 ==========
there is no current partition semaphore named SEMAPHORE_NAME
[['no current partition semaphore', 'named', 'SEMAPHORE_NAME']]
logic3: SEMAPHORE(SEMAPHORE_NAME) not in Set(this->PARTITION.SEMAPHORE)
========== 119 ==========
SEMAPHORE_ID does not identify an existing semaphore
[['SEMAPHORE_ID', 'does not identify', 'an existing semaphore']]
logic3: SEMAPHORE(SEMAPHORE_ID) not in Set(SEMAPHORE)
========== 120 ==========
the maximum number of events has been created
[['the maximum number of events', 'has been created']]
logic2: isMaximum(len(Set(EVENT)))
========== 121 ==========
the event named EVENT_NAME has already been created
[['the event named EVENT_NAME', 'has been created', 'T:already']]
logic2: EVENT(EVENT_NAME) in Set(EVENT)
========== 122 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 123 ==========
EVENT_ID does not identify an existing event
[['EVENT_ID', 'does not identify', 'an existing event']]
logic3: EVENT(EVENT_ID) not in Set(EVENT)
========== 124 ==========
EVENT_ID does not identify an existing event
[['EVENT_ID', 'does not identify', 'an existing event']]
logic3: EVENT(EVENT_ID) not in Set(EVENT)
========== 125 ==========
EVENT_ID does not identify an existing event
[['EVENT_ID', 'does not identify', 'an existing event']]
logic3: EVENT(EVENT_ID) not in Set(EVENT)
========== 126 ==========
TIME_OUT is out of range
[['TIME_OUT', 'is', 'out of range']]
logic3: isOutOf(TIME_OUT, range)
========== 127 ==========
there is no current partition event named EVENT_NAME
[['no current partition event', 'named', 'EVENT_NAME']]
logic3: EVENT(EVENT_NAME) not in Set(this->PARTITION.EVENT)
========== 128 ==========
EVENT_ID does not identify an existing event
[['EVENT_ID', 'does not identify', 'an existing event']]
logic3: EVENT(EVENT_ID) not in Set(EVENT)
========== 129 ==========
LENGTH is out of range
[['LENGTH', 'is', 'out of range']]
logic3: isOutOf(LENGTH, range)
========== 130 ==========
error handler process is already created
[['error handler process', 'is created', 'T:already']]
logic2: ERROR_HANDLER_PROCESS in Set(PROCESS)
========== 131 ==========
STACK_SIZE is out of range
[['STACK_SIZE', 'is', 'out of range']]
logic3: isOutOf(STACK_SIZE, range)
========== 132 ==========
operating mode is NORMAL
[['operating mode', 'is', 'NORMAL']]
logic3: this->PARTITION.OPERATING_MODE == NORMAL
========== 133 ==========
the current process is not the error handler
[['the current process', 'is not', 'the error handler']]
logic3: this->PROCESS != ERROR_HANDLER_PROCESS
========== 134 ==========
LENGTH is negative or is greater than MAX_ERROR_MESSAGE_SIZE
[['LENGTH', 'is', 'negative'], 'or', ['LENGTH', 'is', 'greater than MAX_ERROR_MESSAGE_SIZE']]
logic3: LENGTH < 0
<-- or -->
logic3: LENGTH > MAX_ERROR_MESSAGE_SIZE
========== 135 ==========
ERROR_CODE is not APPLICATION_ERROR
[['ERROR_CODE', 'is not', 'APPLICATION_ERROR']]
logic3: ERROR_CODE != APPLICATION_ERROR